{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SST ETL","text":"<p>Welcome to the SST ETL project! This site provides a quick overview and key links to help you explore the repository.</p>"},{"location":"#overview","title":"Overview","text":"<p>SST ETL is a lightweight Python package and CLI that showcases production-ready ETL practices for monthly Sea Surface Temperature (SST) and ENSO (Ni\u00f1o 3.4) data. It is designed for workshops and teaching environments, emphasizing testing, documentation, and continuous integration.</p>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Project Repository</li> <li>Installation Guide</li> <li>Get Started</li> <li>API Reference</li> <li>Community Guidelines</li> </ul>"},{"location":"#stay-in-touch","title":"Stay in Touch","text":"<p>If you have questions or want to contribute, please open an issue or pull request on GitHub. We welcome ideas that improve clarity for learners and workshop participants.</p>"},{"location":"api/","title":"API Reference","text":"<p>Explore the auto-generated API documentation for SST ETL modules:</p> <ul> <li>CLI</li> <li>IO</li> <li>Transform</li> <li>Plot</li> </ul>"},{"location":"api/cli/","title":"<code>sst.cli</code>","text":"<p>Command-line interface for running the SST ETL workflow.</p>"},{"location":"api/cli/#sst.cli.run","title":"<code>run(sst=Path('data/sst_sample.csv'), enso=Path('data/nino34_sample.csv'), out_dir=Path('artifacts'), start='2000-01')</code>","text":"<p>Run the SST ETL workflow end-to-end.</p> <p>Parameters:</p> Name Type Description Default <code>sst</code> <code>Path</code> <p>Location of the SST CSV file to ingest.</p> <code>\"data/sst_sample.csv\"</code> <code>enso</code> <code>Path</code> <p>Location of the ENSO index CSV file to ingest.</p> <code>\"data/nino34_sample.csv\"</code> <code>out_dir</code> <code>Path</code> <p>Directory where generated summary artifacts are written.</p> <code>\"artifacts\"</code> <code>start</code> <code>str</code> <p>Earliest date to retain after joining the SST and ENSO data. Parsed to a timestamp via :func:<code>pandas.to_datetime</code>.</p> <code>\"2000-01\"</code> <p>Returns:</p> Type Description <code>None</code> <p>Writes a metrics CSV and trend plot to <code>out_dir</code> and prints their locations.</p> Source code in <code>src/sst/cli.py</code> <pre><code>@app.command(\"run\")\ndef run(\n    sst: Path = Path(\"data/sst_sample.csv\"),\n    enso: Path = Path(\"data/nino34_sample.csv\"),\n    out_dir: Path = Path(\"artifacts\"),\n    start: str = \"2000-01\",\n) -&gt; None:\n    \"\"\"Run the SST ETL workflow end-to-end.\n\n    Parameters\n    ----------\n    sst : pathlib.Path, default=\"data/sst_sample.csv\"\n        Location of the SST CSV file to ingest.\n    enso : pathlib.Path, default=\"data/nino34_sample.csv\"\n        Location of the ENSO index CSV file to ingest.\n    out_dir : pathlib.Path, default=\"artifacts\"\n        Directory where generated summary artifacts are written.\n    start : str, default=\"2000-01\"\n        Earliest date to retain after joining the SST and ENSO data. Parsed\n        to a timestamp via :func:`pandas.to_datetime`.\n\n    Returns\n    -------\n    None\n        Writes a metrics CSV and trend plot to ``out_dir`` and prints their\n        locations.\n    \"\"\"\n\n    out_dir.mkdir(parents=True, exist_ok=True)\n\n    sst_df = tidy(load_sst(sst), date_col=\"date\", value_col=\"sst_c\", roll=12)\n    enso_df = tidy(load_enso(enso), date_col=\"date\", value_col=\"nino34\", roll=12)\n\n    joined = join_on_month(sst_df, enso_df, start=start)\n\n    summary = metrics(joined)\n    (out_dir / \"summary.csv\").write_text(summary.to_csv(index=False))\n\n    fig = make_trend_plot(joined)\n    fig.savefig(out_dir / \"trends.png\", dpi=150, bbox_inches=\"tight\")\n\n    fig = make_corr_plot(joined)\n    fig.savefig(out_dir / \"scatter_plot.png\", dpi=150, bbox_inches=\"tight\")\n    print(\n        f\"Wrote {out_dir / 'summary.csv'} and {out_dir / 'trends.png'} and {out_dir / 'correlation.png'}\"\n    )\n</code></pre>"},{"location":"api/io/","title":"<code>sst.io</code>","text":"<p>IO helpers for loading SST and ENSO data sets.</p>"},{"location":"api/io/#sst.io.load_enso","title":"<code>load_enso(path)</code>","text":"<p>Load ENSO index observations from disk.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>File system location of a CSV file containing <code>date</code> and <code>nino34</code> columns.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>Parsed ENSO index table with original column names and dtypes.</p> Source code in <code>src/sst/io.py</code> <pre><code>def load_enso(path: Path) -&gt; pd.DataFrame:\n    \"\"\"Load ENSO index observations from disk.\n\n    Parameters\n    ----------\n    path : pathlib.Path\n        File system location of a CSV file containing ``date`` and ``nino34``\n        columns.\n\n    Returns\n    -------\n    pandas.DataFrame\n        Parsed ENSO index table with original column names and dtypes.\n    \"\"\"\n    return pd.read_csv(path)\n</code></pre>"},{"location":"api/io/#sst.io.load_sst","title":"<code>load_sst(path)</code>","text":"<p>Load sea surface temperature observations from disk.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>File system location of a CSV file containing <code>date</code> and <code>sst_c</code> columns.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>Parsed SST table with original column names and dtypes.</p> Source code in <code>src/sst/io.py</code> <pre><code>def load_sst(path: Path) -&gt; pd.DataFrame:\n    \"\"\"Load sea surface temperature observations from disk.\n\n    Parameters\n    ----------\n    path : pathlib.Path\n        File system location of a CSV file containing ``date`` and ``sst_c``\n        columns.\n\n    Returns\n    -------\n    pandas.DataFrame\n        Parsed SST table with original column names and dtypes.\n    \"\"\"\n    return pd.read_csv(path)\n</code></pre>"},{"location":"api/plot/","title":"<code>sst.plot</code>","text":"<p>Plotting utilities for SST and ENSO trend visualizations.</p>"},{"location":"api/plot/#sst.plot.make_corr_plot","title":"<code>make_corr_plot(joined)</code>","text":"<p>Visualize rolling SST and ENSO relationship from a joined dataset.</p> <p>Parameters:</p> Name Type Description Default <code>joined</code> <code>DataFrame</code> <p>Output of :func:<code>sst.transform.join_on_month</code> containing date, SST rolling means, and ENSO rolling means. The frame must include <code>sst_c_roll12</code> and <code>nino34_roll12</code> columns.</p> required <p>Returns:</p> Type Description <code>Figure</code> <p>Scatter plot figure showing the correlation between rolling SST and ENSO values.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>joined</code> is empty or lacks the required rolling columns.</p> Source code in <code>src/sst/plot.py</code> <pre><code>def make_corr_plot(joined: pd.DataFrame) -&gt; plt.Figure:\n    \"\"\"Visualize rolling SST and ENSO relationship from a joined dataset.\n\n    Parameters\n    ----------\n    joined : pandas.DataFrame\n        Output of :func:`sst.transform.join_on_month` containing date, SST\n        rolling means, and ENSO rolling means. The frame must include\n        ``sst_c_roll12`` and ``nino34_roll12`` columns.\n\n    Returns\n    -------\n    matplotlib.figure.Figure\n        Scatter plot figure showing the correlation between rolling SST and\n        ENSO values.\n\n    Raises\n    ------\n    ValueError\n        If ``joined`` is empty or lacks the required rolling columns.\n    \"\"\"\n\n    if joined.empty:\n        raise ValueError(\"Joined DataFrame must contain at least one row.\")\n\n    required_cols = {\"sst_c_roll12\", \"nino34_roll12\"}\n    if not required_cols.issubset(joined.columns):\n        missing = required_cols.difference(joined.columns)\n        raise ValueError(f\"Joined DataFrame is missing required columns: {sorted(missing)}\")\n\n    sns.set_theme(style=\"whitegrid\")\n    fig, ax = plt.subplots(figsize=(6, 5))\n    sns.regplot(\n        data=joined,\n        x=\"nino34_roll12\",\n        y=\"sst_c_roll12\",\n        scatter_kws={\"alpha\": 0.6},\n        line_kws={\"color\": \"black\"},\n        ax=ax,\n    )\n\n    ax.set_title(\"Correlation of 12-Month Rolling SST vs ENSO\")\n    ax.set_xlabel(\"Ni\u00f1o 3.4 (roll12)\")\n    ax.set_ylabel(\"SST (\u00b0C, roll12)\")\n\n    fig.tight_layout()\n    return fig\n</code></pre>"},{"location":"api/plot/#sst.plot.make_trend_plot","title":"<code>make_trend_plot(df)</code>","text":"<p>Create a dual-axis plot for rolling SST and ENSO series.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>Joined data containing <code>date</code>, <code>sst_c_roll12</code>, and <code>nino34_roll12</code> columns.</p> required <p>Returns:</p> Type Description <code>Figure</code> <p>Figure object with SST on the primary axis and ENSO on a secondary axis.</p> Source code in <code>src/sst/plot.py</code> <pre><code>def make_trend_plot(df: pd.DataFrame) -&gt; plt.Figure:\n    \"\"\"Create a dual-axis plot for rolling SST and ENSO series.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        Joined data containing ``date``, ``sst_c_roll12``, and\n        ``nino34_roll12`` columns.\n\n    Returns\n    -------\n    matplotlib.figure.Figure\n        Figure object with SST on the primary axis and ENSO on a secondary\n        axis.\n    \"\"\"\n\n    fig, ax1 = plt.subplots(figsize=(8, 4))\n\n    ax1.plot(df[\"date\"], df[\"sst_c_roll12\"], label=\"SST (\u00b0C, roll12)\", color=\"blue\")\n    ax1.set_xlabel(\"Date\")\n    ax1.set_ylabel(\"SST (\u00b0C)\")\n\n    ax2 = ax1.twinx()\n    ax2.plot(df[\"date\"], df[\"nino34_roll12\"], label=\"Ni\u00f1o 3.4 (roll12)\", color=\"orange\")\n    ax2.set_ylabel(\"Ni\u00f1o 3.4 index\")\n\n    ax1.set_title(\"SST and ENSO (12\u2011mo rolling means)\")\n    fig.legend(loc=\"upper left\", bbox_to_anchor=(0.1, 0.95))\n    fig.tight_layout()\n\n    return fig\n</code></pre>"},{"location":"api/transform/","title":"<code>sst.transform</code>","text":"<p>Transform utilities for preparing SST and ENSO time series.</p>"},{"location":"api/transform/#sst.transform.join_on_month","title":"<code>join_on_month(sst, enso, start=None)</code>","text":"<p>Join SST and ENSO records on their monthly <code>date</code> column.</p> <p>Parameters:</p> Name Type Description Default <code>sst</code> <code>DataFrame</code> <p>Sea surface temperature observations produced by :func:<code>tidy</code>.</p> required <code>enso</code> <code>DataFrame</code> <p>ENSO index observations produced by :func:<code>tidy</code>.</p> required <code>start</code> <code>str</code> <p>Earliest date to retain after joining (inclusive). Parsed with :func:<code>pandas.to_datetime</code> if provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>DataFrame containing the merged records, filtered to <code>start</code> when supplied, and indexed consecutively.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; sst = tidy(pd.DataFrame({\"date\": [\"2000-01-01\"], \"sst_c\": [20.0]}), \"date\", \"sst_c\")\n&gt;&gt;&gt; enso = tidy(pd.DataFrame({\"date\": [\"2000-01-01\"], \"nino34\": [0.5]}), \"date\", \"nino34\")\n&gt;&gt;&gt; join_on_month(sst, enso).columns.tolist()\n['date', 'sst_c', 'sst_c_roll12', 'nino34', 'nino34_roll12']\n</code></pre> Source code in <code>src/sst/transform.py</code> <pre><code>def join_on_month(sst: pd.DataFrame, enso: pd.DataFrame, start: str | None = None) -&gt; pd.DataFrame:\n    \"\"\"Join SST and ENSO records on their monthly ``date`` column.\n\n    Parameters\n    ----------\n    sst : pandas.DataFrame\n        Sea surface temperature observations produced by :func:`tidy`.\n    enso : pandas.DataFrame\n        ENSO index observations produced by :func:`tidy`.\n    start : str, optional\n        Earliest date to retain after joining (inclusive). Parsed with\n        :func:`pandas.to_datetime` if provided.\n\n    Returns\n    -------\n    pandas.DataFrame\n        DataFrame containing the merged records, filtered to ``start`` when\n        supplied, and indexed consecutively.\n\n    Examples\n    --------\n    &gt;&gt;&gt; import pandas as pd\n    &gt;&gt;&gt; sst = tidy(pd.DataFrame({\"date\": [\"2000-01-01\"], \"sst_c\": [20.0]}), \"date\", \"sst_c\")\n    &gt;&gt;&gt; enso = tidy(pd.DataFrame({\"date\": [\"2000-01-01\"], \"nino34\": [0.5]}), \"date\", \"nino34\")\n    &gt;&gt;&gt; join_on_month(sst, enso).columns.tolist()\n    ['date', 'sst_c', 'sst_c_roll12', 'nino34', 'nino34_roll12']\n    \"\"\"\n\n    df = pd.merge(sst, enso, on=\"date\", how=\"left\")\n    if start:\n        df = df[df[\"date\"] &gt;= pd.to_datetime(start)]\n    return df.reset_index(drop=True)\n</code></pre>"},{"location":"api/transform/#sst.transform.metrics","title":"<code>metrics(df)</code>","text":"<p>Summarize rolling SST and ENSO time series with key indicators.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>Joined SST and ENSO tidy data that contains a <code>date</code> column along with at least one rolling SST column (<code>sst_c_roll*</code>) and one rolling ENSO column (<code>nino34_roll*</code>).</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>Single-row DataFrame containing trend, delta, correlation, and record count statistics for the supplied series.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; joined = join_on_month(\n...     tidy(pd.DataFrame({\"date\": [\"2000-01-01\"], \"sst_c\": [20.0]}), \"date\", \"sst_c\"),\n...     tidy(pd.DataFrame({\"date\": [\"2000-01-01\"], \"nino34\": [0.5]}), \"date\", \"nino34\"),\n... )\n&gt;&gt;&gt; metrics(joined).columns.tolist()\n['sst_trend_c_per_decade', 'delta_sst_last_yr_c', 'delta_enso_last_yr', 'corr_sst_enso_roll', 'n_months']\n</code></pre> Source code in <code>src/sst/transform.py</code> <pre><code>def metrics(df: pd.DataFrame) -&gt; pd.DataFrame:\n    \"\"\"Summarize rolling SST and ENSO time series with key indicators.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        Joined SST and ENSO tidy data that contains a ``date`` column along\n        with at least one rolling SST column (``sst_c_roll*``) and one rolling\n        ENSO column (``nino34_roll*``).\n\n    Returns\n    -------\n    pandas.DataFrame\n        Single-row DataFrame containing trend, delta, correlation, and record\n        count statistics for the supplied series.\n\n    Examples\n    --------\n    &gt;&gt;&gt; import pandas as pd\n    &gt;&gt;&gt; joined = join_on_month(\n    ...     tidy(pd.DataFrame({\"date\": [\"2000-01-01\"], \"sst_c\": [20.0]}), \"date\", \"sst_c\"),\n    ...     tidy(pd.DataFrame({\"date\": [\"2000-01-01\"], \"nino34\": [0.5]}), \"date\", \"nino34\"),\n    ... )\n    &gt;&gt;&gt; metrics(joined).columns.tolist()\n    ['sst_trend_c_per_decade', 'delta_sst_last_yr_c', 'delta_enso_last_yr', 'corr_sst_enso_roll', 'n_months']\n    \"\"\"\n\n    d = df.set_index(\"date\")\n\n    sst_col = (\n        \"sst_c_roll12\"\n        if \"sst_c_roll12\" in d.columns\n        else [c for c in d.columns if c.startswith(\"sst_c_roll\")][0]\n    )\n    enso_col = (\n        \"nino34_roll12\"\n        if \"nino34_roll12\" in d.columns\n        else [c for c in d.columns if c.startswith(\"nino34_roll\")][0]\n    )\n\n    sst_trend_c_per_dec = _simple_trend(d[sst_col].dropna(), per=\"decade\")\n\n    delta_sst_lastyr = _delta_last_year(d[sst_col])\n    delta_enso_lastyr = _delta_last_year(d[enso_col])\n\n    corr = d[sst_col].corr(d[enso_col])\n\n    return pd.DataFrame(\n        [\n            {\n                \"sst_trend_c_per_decade\": (\n                    round(sst_trend_c_per_dec, 3) if pd.notna(sst_trend_c_per_dec) else None\n                ),\n                \"delta_sst_last_yr_c\": (\n                    round(delta_sst_lastyr, 3) if pd.notna(delta_sst_lastyr) else None\n                ),\n                \"delta_enso_last_yr\": (\n                    round(delta_enso_lastyr, 3) if pd.notna(delta_enso_lastyr) else None\n                ),\n                \"corr_sst_enso_roll\": round(float(corr), 3) if pd.notna(corr) else None,\n                \"n_months\": int(len(d)),\n            }\n        ]\n    )\n</code></pre>"},{"location":"api/transform/#sst.transform.tidy","title":"<code>tidy(df, date_col, value_col, roll=12)</code>","text":"<p>Create a tidy, chronologically ordered DataFrame with rolling means.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>Raw input data containing at least the date and value columns.</p> required <code>date_col</code> <code>str</code> <p>Name of the column with dates parsable by :func:<code>pandas.to_datetime</code>.</p> required <code>value_col</code> <code>str</code> <p>Name of the column with the measurement to smooth.</p> required <code>roll</code> <code>int</code> <p>Rolling window size (number of observations) used to compute the mean.</p> <code>12</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>Sorted copy of the original data with a new column containing the rolling mean named <code>\"{value_col}_roll{roll}\"</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; raw = pd.DataFrame({\"date\": [\"2000-01-01\", \"2000-02-01\"], \"sst_c\": [20.0, 20.1]})\n&gt;&gt;&gt; tidy(raw, \"date\", \"sst_c\").columns.tolist()\n['date', 'sst_c', 'sst_c_roll12']\n</code></pre> Source code in <code>src/sst/transform.py</code> <pre><code>def tidy(df: pd.DataFrame, date_col: str, value_col: str, roll: int = 12) -&gt; pd.DataFrame:\n    \"\"\"Create a tidy, chronologically ordered DataFrame with rolling means.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        Raw input data containing at least the date and value columns.\n    date_col : str\n        Name of the column with dates parsable by :func:`pandas.to_datetime`.\n    value_col : str\n        Name of the column with the measurement to smooth.\n    roll : int, default=12\n        Rolling window size (number of observations) used to compute the mean.\n\n    Returns\n    -------\n    pandas.DataFrame\n        Sorted copy of the original data with a new column containing the\n        rolling mean named ``\"{value_col}_roll{roll}\"``.\n\n    Examples\n    --------\n    &gt;&gt;&gt; import pandas as pd\n    &gt;&gt;&gt; raw = pd.DataFrame({\"date\": [\"2000-01-01\", \"2000-02-01\"], \"sst_c\": [20.0, 20.1]})\n    &gt;&gt;&gt; tidy(raw, \"date\", \"sst_c\").columns.tolist()\n    ['date', 'sst_c', 'sst_c_roll12']\n    \"\"\"\n\n    out = df[[date_col, value_col]].copy()\n\n    out[date_col] = pd.to_datetime(out[date_col])\n    out = out.sort_values(date_col).dropna()\n\n    out[f\"{value_col}_roll{roll}\"] = out[value_col].rolling(roll, min_periods=1).mean()\n    return out\n</code></pre>"}]}